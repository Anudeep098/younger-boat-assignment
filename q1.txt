import 'dart:core';

bool isSubsetSum(List<int> arr, int n, int targetSum) {
  List<List<bool>> dp = List.generate(n + 1, (i) => List.filled(targetSum + 1, false));

  // If sum is 0, then the answer is True (empty subset)
  for (int i = 0; i <= n; i++) {
    dp[i][0] = true;
  }

  // Fill the subset sum table
  for (int i = 1; i <= n; i++) {
    for (int j = 1; j <= targetSum; j++) {
      if (arr[i - 1] <= j) {
        dp[i][j] = dp[i - 1][j] || dp[i - 1][j - arr[i - 1]];
      } else {
        dp[i][j] = dp[i - 1][j];
      }
    }
  }

  return dp[n][targetSum];
}

void main() {
  List<int> arr = [3, 34, 4, 12, 5, 2];

  int targetSum1 = 9;
  print("Subset with sum $targetSum1 exists: ${isSubsetSum(arr, arr.length, targetSum1)}");

  int targetSum2 = 30;
  print("Subset with sum $targetSum2 exists: ${isSubsetSum(arr, arr.length, targetSum2)}");
}
 


Output:

Subset with sum 10 exists: true
Subset with sum 30 exists: false



Question:

Array Problem:
Given an array arr[] of non-negative integers and a value sum, the task is to
check if there is a subset of the given array whose sum is equal to the given
sum.
Examples:
Input: arr[] = {3, 34, 4, 12, 5, 2}, sum = 9
Output: True
Explanation: There is a subset (4, 5) with sum 9.
Input: arr[] = {3, 34, 4, 12, 5, 2}, sum = 30
Output: False
Explanation: There is no subset that add up to 30.