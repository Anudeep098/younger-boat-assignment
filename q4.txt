int longestSubarrayWithSumAtMostK(List<int> arr, int k) {
  int left = 0, right = 0, sum = 0, maxLength = 0;

  while (right < arr.length) {
    sum += arr[right];

    while (sum > k) {
      sum -= arr[left];
      left++;
    }

    maxLength = (right - left + 1).clamp(maxLength, arr.length);
    right++;
  }

  return maxLength;
}

void main() {
  List<int> arr = [3, 1, 2, 1, 4, 5];
  int k = 7;
  print("Longest subarray length with sum ≤ $k: ${longestSubarrayWithSumAtMostK(arr, k)}");
}




Output:

Longest subarray length with sum ≤ 7: 4



Question:

Problem Statement:
Longest Subarray with Sum ≤ K
Given an array arr[] of size N containing positive integers and an integer K, find
the length of the longest contiguous subarray whose sum is less than or equal
to K.
Input:
An integer N (1 ≤ N ≤ 10⁵), the size of the array.
An integer array arr[] of size N, containing positive numbers.
An integer K (1 ≤ K ≤ 10⁹), the target sum.
Output:
Return an integer representing the length of the longest subarray whose sum
is ≤ K.
Example 1:
arr[] = {3, 1, 2, 1, 4, 5}
K = 7
Output:4
Explanation:
The longest subarray with sum ≤ 7 is {3, 1, 2, 1}, which has length 4.